alias physicalSP S0;
alias sysCallNo S1;
alias counter S2;
alias currentPID S3;
alias currentPCB S4;
alias indexSwop S5;
alias newPCB S6;
alias i S7;
alias newphysicalSP S8;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

sysCallNo = [physicalSP - 1];
currentPID = (PTBR-1024)/8;
currentPCB = READY_LIST + (32*currentPID);


if(sysCallNo==10) then
//STAGE 11 MODIFICATION
	counter=0;
	while(counter<32) do                                           //resuming all processes
			if([READY_LIST+(32*counter)+1]==100+currentPID) then
				[READY_LIST+32*counter+1]=1;
			endif;
			counter=counter+1;
		endwhile;

	counter = 0;

	while(counter<32 && [READY_LIST + (32*counter) + 1]!=1)do
		counter = counter +1;
	endwhile;

	if(counter==32)then
		halt;
	endif;


counter = 0;
while(counter<8)do
	if([currentPCB + 15 + (2* counter) + 0]==-1)then
		[currentPCB + 15 + (2* counter) + 1] = -1;
		counter = counter + 1;
	else
		indexSwop = [currentPCB + (15 + 2* counter)+0];
		[FILE_TABLE + (2 * indexSwop)+1] = [FILE_TABLE + (2 * indexSwop)+1] - 1;
		
		if([FILE_TABLE + (2 * indexSwop)+1]==0)then
			[FILE_TABLE + (2 * indexSwop)+0] = -1;
		endif;
		[currentPCB + (15 + 2* counter)+0] = -1;
		[currentPCB + (15 + 2* counter)+1] = -1;
				
		counter = counter + 1;
	endif;				
endwhile;

[currentPCB + 1] =0; //state = terminated

counter = 0;
while(counter<4)do
	if([PTBR + (2*counter)+1]=="01" || [PTBR + (2*counter)+1]=="11")then
		[MEM_LIST + [PTBR + (2*counter)+0]]=0;
		[PTBR + (2*counter)+0] = -1;
		[PTBR + (2*counter)+1] = "00";
		counter = counter + 1;
	else	
		[PTBR + (2*counter)+0] = -1;
		[PTBR + (2*counter)+1] = "00";
		counter = counter + 1;
	endif;
endwhile;

i=0;
counter=currentPCB+32;
while(i<=32) do
	if([counter+1]==1) then
		newPCB=counter;
		break;
	endif;
	if(counter==READY_LIST+32*31) then
		counter=READY_LIST;
	else
		counter=counter+32;
	endif;
	i=i+1;	
endwhile;
		
BP=[newPCB+2];
SP=[newPCB+3];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];
PTBR=[newPCB+5];
PTLR=[newPCB+6];

SP = SP + 1;

newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack 
[ newPCB + 1 ] = 2; // Set STATE to READY
ireturn;


endif;

// WAIT AND SIGNAL STARTS FROM HERE ONWARDS
alias waitingPID S9;


if(sysCallNo==13) then
	waitingPID=[physicalSP-3];
	
	if([READY_LIST + (32*waitingPID) + 1]==0 || [READY_LIST + (32*waitingPID) + 1]==2)then
		[physicalSP-2]=-1;
		ireturn;
	endif;			
currentPID = (PTBR-1024)/8;
currentPCB = READY_LIST + (32*currentPID);

	[currentPCB + 1] = 100+waitingPID;
	[ currentPCB + 2 ] = BP;
	[ currentPCB + 3 ] = SP - 1; 
	[ currentPCB + 4 ] = [ physicalSP ];
	[ currentPCB + 5 ] = PTBR;
	[ currentPCB + 6 ] = PTLR ; 
	[ currentPCB + 7 ] = R0; 
	[ currentPCB + 8 ] = R1; 
	[ currentPCB + 9 ] = R2; 
	[ currentPCB + 10 ] = R3; 
	[ currentPCB + 11 ] = R4; 
	[ currentPCB + 12 ] = R5; 
	[ currentPCB + 13 ] = R6; 
	[ currentPCB + 14 ] = R7;

i=0;
counter=currentPCB+32;
while(i<=32) do
	if([counter+1]==1) then
		newPCB=counter;
		break;
	endif;
	if(counter==READY_LIST+32*31) then
		counter=READY_LIST;
	else
		counter=counter+32;
	endif;
	i=i+1;	
endwhile;
		
BP=[newPCB+2];
SP=[newPCB+3];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];
PTBR=[newPCB+5];
PTLR=[newPCB+6];

SP = SP + 1;

newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack 
[ newPCB + 1 ] = 2; // Set STATE to READY


[physicalSP-2]=0;
ireturn;
	
endif;

if (sysCallNo==14 ) then
	counter=0;
	while(counter<32) do
		if([READY_LIST+(32*counter)+1]==100+currentPID) then
			[READY_LIST+(32*counter)+1]=1;
		endif;
		counter=counter+1;
	endwhile;	

	[physicalSP-2]=0;
	ireturn;
endif;
























