alias physicalSP S0;
alias sysCallNo S1;
alias counter S2;
alias currentPID S3;
alias currentPCB S4;
alias indexSwop S5;
alias nextPCB S6;
alias i S7;
alias newphysicalSP S8;
alias j S9;
alias k S10;
alias waitingPID S11;
alias l S12;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

sysCallNo = [physicalSP - 1];
currentPID = (PTBR-1024)/8;
currentPCB = READY_LIST + (32*currentPID);


if (sysCallNo==14 || sysCallNo==10) then
	counter=0;

	while(counter<32) do
		if([READY_LIST+(32*counter)+1]==0 || [READY_LIST+(32*counter)+1]==2) then
			counter=counter+1;	
		else
			if([READY_LIST+(32*counter)+1]!=1)then
			
			load(1,[READY_LIST+(32*counter)+1]);
			i=0;
			while(i<512)do
				if([512+i]==currentPID)then
					[512+i]=-100;
				
					j=0;
					k=0;
					while(j<512)do
						if([512+j]==-100)then
							k=k+1;
						endif;
						j=j+1;
					endwhile;
					if(k==512)then
						[DISK_LIST + [READY_LIST+(32*counter)+1]]=0;
						[READY_LIST+(32*counter)+1]=1;
						store(6,20);
					endif;
				endif;
				i=i+1;
				
			endwhile;
			store(1,[READY_LIST+(32*counter)+1]);
			endif;
			counter=counter+1;			
		endif;
		
	endwhile;	


endif;

if(sysCallNo==10) then
//STAGE 11 MODIFICATION
//RESUMING DONE ABOVE IN SYSCALL 14

nextPCB=currentPCB;
i=0;
counter=currentPID+1;

while(i<=31) do

	if(counter==32) then
		counter=0;
	
	endif;

	if([READY_LIST+32*counter+1]==1) then
		nextPCB=READY_LIST+32*counter;
		break;
	endif;
	counter=counter+1;
	i=i+1;	
endwhile;
        if(i==32) then
		halt;
	endif;

//CLOSE THE FILES NOW
counter = 0;
while(counter<8)do
	if([currentPCB + 15 + (2* counter) + 0]==-1)then
		counter = counter + 1;
	else
		indexSwop = [currentPCB + (15 + 2* counter)+0];
		[FILE_TABLE + (2 * indexSwop)+1] = [FILE_TABLE + (2 * indexSwop)+1] - 1;
		
		if([FILE_TABLE + (2 * indexSwop)+1]==0)then
			[FILE_TABLE + (2 * indexSwop)+0] = -1;
		endif;
		[currentPCB + (15 + 2* counter)+0] = -1;
		[currentPCB + (15 + 2* counter)+1] = -1;
		counter = counter + 1;			
	endif;
	
					
endwhile;

[currentPCB + 1] =0; //state = terminated

//MODIFIED HERE NOW
counter=0;	
	while(counter<4) do                                                          // valid page of current process
		if([PTBR+2*counter + 1]=="01" || [PTBR+2*counter + 1]== "11") then
			[MEM_LIST+[PTBR+2*counter]]=[MEM_LIST+[PTBR+2*counter]]-1;
		else
			if([PTBR+2*counter]>447 && [PTBR+2*counter]<512) then                                //swap area block	
				[DISK_LIST+[PTBR+2*counter]]=[DISK_LIST+[PTBR+2*counter]]-1;
			endif;
		endif;
		[PTBR + 2*counter + 0] = -1;
		[PTBR + 2*counter + 1] = "00";
		counter=counter+1;
	endwhile;
	store(6,20);
	// jump to scheduler now
		inline "JMP 4608";

endif;

// WAIT AND SIGNAL STARTS FROM HERE ONWARDS

if(sysCallNo==13) then
	waitingPID=[physicalSP-3];
	
	if(waitingPID==-1)then		//TROUBLE
		counter=31;
		l=31;
	else	
		l=0;
		counter=waitingPID;
	endif;

		while(l>=0)do
			if([READY_LIST + (32*counter) + 1]==0 || [READY_LIST + (32*counter) + 1]==2)then
				counter=counter-1;
				l=l-1;
				
			else
				i = [READY_LIST + (32*counter) + 1]; 	
				
				if(i==1)then
					j=0;

					while(j<448 && [DISK_LIST + j]!=0)do
						j=j+1;	
					endwhile;
					load(1,j);
					[DISK_LIST + j]=1;
					k = 0;
					while(k<512)do
						[512+k]=-100;
						k=k+1;
					endwhile;		
					[512+0]=currentPID;
					[READY_LIST + (32*counter) + 1] = j;
					store(1,j);
					store(6,20);
				else
					load(1,i);
					k=0;
					while(k<512 && [512+k]!=-100)do
						k=k+1;
					endwhile;
					[512+k]=currentPID;
					store(1,i);
				endif;
			counter=counter-1;
			l=l-1;	
			endif;
		endwhile;
endif;

[physicalSP-2]=0;
ireturn;





























