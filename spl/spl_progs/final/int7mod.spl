alias physicalSP S0;
alias sysCallNo S1;
alias counter S2;
alias currentPID S3;
alias currentPCB S4;
alias indexSwop S5;
alias nextPCB S6;
alias i S7;
alias newphysicalSP S8;
alias j S9;
alias k S10;
counter=0;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

sysCallNo = [physicalSP - 1];
currentPID = (PTBR-1024)/8;
currentPCB = READY_LIST + (32*currentPID);
i=0;


if (sysCallNo==14 || sysCallNo==10) then
	counter=0;

	while(counter<32) do
		if([READY_LIST+(32*counter)+1]==0 || [READY_LIST+(32*counter)+1]==2) then
			counter=counter+1;	
		else
			load(1,[READY_LIST+(32*counter)+1]);
			i=0;
			while(i<512)do
				if([512+i]==currentPID)then
					[512+i]=-100;
				
					j=0;
					k=0;
					while(j<512)do
						if([512+j]==-100)then
							k=k+1;
						endif;
						j=j+1;
					endwhile;
					if(k==512)then
						[DISK_LIST + [READY_LIST+(32*counter)+1]]=0;
						[READY_LIST+(32*counter)+1]=1;
						store(6,20);
					endif;
				endif;
				i=i+1;
				
			endwhile;
			store(1,[READY_LIST+(32*counter)+1]);
			counter=counter+1;		
		endif;
		
	endwhile;	


endif;

if(sysCallNo==10) then
//STAGE 11 MODIFICATION
//RESUMING DONE ABOVE IN SYSCALL 14

nextPCB=currentPCB;
i=0;
counter=currentPID+1;

while(i<=31) do

	if(counter==32) then
		counter=0;
	
	endif;

	if([READY_LIST+32*counter+1]==1) then
		nextPCB=READY_LIST+32*counter;
		break;
	endif;
	counter=counter+1;
	i=i+1;	
endwhile;
        if(i==32) then
		halt;
	endif;

//CLOSE THE FILES NOW
counter = 0;
while(counter<8)do
	if([currentPCB + 15 + (2* counter) + 0]==-1)then
		[currentPCB + 15 + (2* counter) + 1] = -1;
		counter = counter + 1;
	else
		indexSwop = [currentPCB + (15 + 2* counter)+0];
		[FILE_TABLE + (2 * indexSwop)+1] = [FILE_TABLE + (2 * indexSwop)+1] - 1;
		
		if([FILE_TABLE + (2 * indexSwop)+1]==0)then
			[FILE_TABLE + (2 * indexSwop)+0] = -1;
		endif;
		[currentPCB + (15 + 2* counter)+0] = -1;
		[currentPCB + (15 + 2* counter)+1] = -1;
				
		counter = counter + 1;
	endif;				
endwhile;

[currentPCB + 1] =0; //state = terminated

//MODIFIED HERE NOW
counter=0;	
	while(counter<4) do                                                          // valid page of current process
		if([PTBR+2*counter + 1]=="01" || [PTBR+2*counter + 1]== "11") then
			[MEM_LIST+[PTBR+2*counter]]=[MEM_LIST+[PTBR+2*counter]]-1;
		else
			if([PTBR+2*counter]>447 && [PTBR+2*counter]<512) then                                //swap area block	
				[DISK_LIST+[PTBR+2*counter]]=[DISK_LIST+[PTBR+2*counter]]-1;
			endif;
		endif;
		[PTBR + 2*counter + 0] = -1;
		[PTBR + 2*counter + 1] = "00";
		counter=counter+1;
	endwhile;
	store(6,20);

//SCHEDULER PRESENT BELOW
	BP = [nextPCB + 2];
	SP = [nextPCB + 3];
	PTBR = [nextPCB + 5];
	PTLR = [nextPCB + 6];
	R0 = [nextPCB + 7];
	R1 = [nextPCB + 8];	
	R2 = [nextPCB + 9];	
	R3 = [nextPCB + 10];
	R4 = [nextPCB + 11];
	R5 = [nextPCB + 12];
	R6 = [nextPCB + 13];
	R7 = [nextPCB + 14];
	SP = SP + 1;
	newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
	[newphysicalSP] = [nextPCB + 4];          // IP field value of PCB on the stack 
	[nextPCB + 1] = 2;



endif;

// WAIT AND SIGNAL STARTS FROM HERE ONWARDS
alias waitingPID S11;

if(sysCallNo==13) then
	waitingPID=[physicalSP-3];
	if(waitingPID==-1)then		//TROUBLE
		counter=0;
		while(counter<32)do
			if([READY_LIST + (32*counter) + 1]==0 || [READY_LIST + (32*counter) + 1]==2)then
				counter=counter+1;
			else
				i = [READY_LIST + (32*counter) + 1]; 	
				
				if(i==1)then
					j=0;

					while(j<448 && [DISK_LIST + j]!=0)do
						j=j+1;	
					endwhile;
					load(1,j);
					[DISK_LIST + j]=1;
					counter = 0;
					while(counter<512)do
						[512+counter]=-100;
						counter=counter+1;
					endwhile;		
					[512+0]=currentPID;
					[READY_LIST + (32*waitingPID) + 1] = j;
					store(1,j);
					store(6,20);
				else
					load(1,i);
					counter=0;
					while(counter<512 && [512+counter]!=-100)do
						counter=counter+1;
					endwhile;
					[512+counter]=currentPID;
					store(1,i);
				endif;
			counter=counter+1;	
			endif;
		endwhile;
	[physicalSP-2]=0;
	ireturn;

	endif;


	i = [READY_LIST + (32*waitingPID) + 1]; 	
	if(i==0 || i ==2)then
		[physicalSP-2]=-1;
		ireturn;
	endif;			
	if(i==1)then
		j=0;
		while(j<448 && [DISK_LIST + j]!=0)do
			j=j+1;	
		endwhile;
		load(1,j);
		[DISK_LIST + j]=1;
		counter = 0;
		while(counter<512)do
			[512+counter]=-100;
			counter=counter+1;
		endwhile;		
		[512+0]=currentPID;
		[READY_LIST + (32*waitingPID) + 1] = j;
		store(1,j);
		store(6,20);
	else
		load(1,i);
		counter=0;
		while(counter<512 && [512+counter]!=-100)do
			counter=counter+1;
		endwhile;
		[512+counter]=currentPID;
		store(1,i);
	endif;
//i dont need to schedule other process

//SCHEDULER IS BELOW
		
endif;

[physicalSP-2]=0;
ireturn;





























