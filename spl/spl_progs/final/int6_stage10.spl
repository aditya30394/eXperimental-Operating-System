alias physicalSP S0;
alias sysCallNo S1;
alias filename S2;
alias counter S3;
alias fatct S4;
alias counterBasic S5;
alias basicBlock S6;
alias i S7;
alias validPage S8;
alias dataCounter S9;
alias freeMem S10;
alias currentPID S11;
alias currentPCB S12;
alias indexSwop S13;
alias diff S14;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

sysCallNo = [physicalSP - 1];

filename = [physicalSP-3];//argument is fetched in register
currentPID = (PTBR - 1024) / 8;
currentPCB = READY_LIST + (32 * currentPID);


if(sysCallNo==9) then
	fatct = 0;
	while(fatct!=64)do
		if([FAT + (8*fatct)]==filename)then
			break;
		else
			fatct = fatct + 1;
		endif;
	endwhile;
	if(fatct==64)then
		[physicalSP-2]=-1;
		ireturn;
	endif;		
	basicBlock = [FAT+(8*fatct)+2];	
	load(1,basicBlock);
	i = 0;
	dataCounter = 0;

	while(i<256)do
		if([512+i]!=-1 && [512+i]!="")then
			dataCounter = dataCounter + 1;
		endif;		
		i=i+1;
	endwhile;
	if(dataCounter>3)then
		[physicalSP-2]=-1;
		ireturn;
	endif;
//DONE STEP 1 and 2 of old exec
//NOW NEW STEPS MUST BE DONE

counter=0;	
while(counter<3) do                                                          // valid page of current process
	if([PTBR+2*counter + 1]==01 || [PTBR+2*counter + 1]== 11) then
		[MEM_LIST+[PTBR+2*counter]]=[MEM_LIST+[PTBR+2*counter]]-1;
	else
		if(([PTBR+2*counter + 1]=="00"||[PTBR+2*counter + 1]== "10") && [PTBR+2*counter]>=448 &&[PTBR+2*counter]<512)then                                 //swap area block	
			[DISK_LIST+[PTBR+2*counter]]=[DISK_LIST+[PTBR+2*counter]]-1;
		endif;
	endif;
	counter=counter+1;
endwhile;
	
counter=0;

	while(dataCounter>counter) do                                  //setting up page table of new process
			[PTBR+2*counter]=[512+counter];
			[PTBR+2*counter+1]="00";
			counter=counter+1;
	endwhile;
counter=0;
	while(3-dataCounter>0) do                              //setting rest entries to -1
		[PTBR+2*dataCounter]=-1;
		[PTBR+2*dataCounter+1]="00";
		dataCounter=dataCounter+1;
	endwhile;

[PTBR+7]="01";		//stack auxiliary info

//MODIFICATION IS OVER NOW
//REST OF THE CODE IS SAME

counter = 0;
while(counter<8)do
	if([currentPCB + 15 + (2* counter) + 0]==-1)then
		[currentPCB + 15 + (2* counter) + 1] = -1;
		counter = counter + 1;
	else
		indexSwop = [currentPCB + (15 + 2* counter)+0];
		[FILE_TABLE + (2 * indexSwop)+1] = [FILE_TABLE + (2 * indexSwop)+1] - 1;
		
		if([FILE_TABLE + (2 * indexSwop)+1]==0)then
			[FILE_TABLE + (2 * indexSwop)+0] = -1;
		endif;
		[currentPCB + (15 + 2* counter)+0] = -1;
		[currentPCB + (15 + 2* counter)+1] = -1;
				
		counter = counter + 1;
	endif;				
endwhile;

SP = 3 * 512;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[physicalSP]=0;
ireturn;

endif;


if(sysCallNo==11) then
	[physicalSP-2]=currentPID;
	ireturn;
endif;


if(sysCallNo==12) then
  	[physicalSP-2]=[currentPCB+31];
	ireturn;
	
endif;








