load(7,1);
load(8,2);
load(23,17);
load(24,18);

[READY_LIST + 0] = 0;
load(25,21); // Load 1st page of code from disk to memory
load(26,22); // Load 2nd page of code from disk to memory
load(27,23); // Load 3rd page of code from disk to memory
PTBR = 1024;
PTLR = 4;
[PTBR + 0] = 25; // Physical Page Number for Logical Page 0
[PTBR + 1] = "01"; // Auxiliary Information for Logical Page 0
[PTBR + 2] = 26; // Physical Page Number for Logical Page 1
[PTBR + 3] = "01"; // Auxiliary Information for Logical Page 1
[PTBR + 4] = 27; // Physical Page Number for Logical Page 2
[PTBR + 5] = "01"; // Auxiliary Information for Logical Page 2
[PTBR + 6] = 28; // Physical Page Number for Logical Page 3 (Stack)
[PTBR + 7] = "01"; // Auxiliary Information for Logical Page 3 (Stack)
[READY_LIST + 1] = 2; // Sets the entry for STATE as Running 
SP = 3 * 512;
[28 * 512] = 0; // Set up the IP value for INIT in the stack 
//load int 1
load (11, 5);
load (12, 6);
//load timer
load (9, 3);
load (10, 4);
//load FAT and disk free list
load (5,19);
load(6,20);

//STAGE 8 MODIFICATIONS

alias swop S0; //system-wide open file table == (FAT index + counts)
swop=0;
while(swop!=128) do
	[FILE_TABLE + swop + 0]=-1;
	[FILE_TABLE + swop + 1]=0;
	swop = swop + 2;
endwhile;

alias counter S1;
counter =15;
while(counter!=31) do
	[READY_LIST + counter] = -1;
	counter=counter + 1;
endwhile;
//load int 2,3,4

load(13,7);
load(14,8);
load(15,9);
load(16,10);
load(17,11);
load(18,12);

//STAGE 9 MODIFICATIONS
//load int 5,6,7
load(19,13);
load(20,14);
load(21,15);
load(22,16);
//load(23,17);
//load(24,18);
counter = 0;

while(counter<29)do
	[MEM_LIST+counter]=1;
	counter=counter+1;
endwhile;

counter = 29;

while(counter<64)do
	[MEM_LIST+counter]=0;
	counter=counter+1;
endwhile;

// Setting state of PCB to 0
counter=1;
while(counter<32) do
	[READY_LIST + (32*counter) + 1]=0;
	counter=counter+1;
endwhile;

//STAGE 11 MODIFICATION

[READY_LIST + 31]=0;
[MEM_LIST+29]=1;
[MEM_LIST+30]=1;

[READY_LIST + 32] = 1; // Sets the entry for PID as 1
load(29,46);
alias PTBR_Process1 S0;
PTBR_Process1 = 1024 + 1 * 8;

// Setting up page table for 2nd process

[PTBR_Process1 + 0] = 29; // Physical Page Number for Logical Page 0
[PTBR_Process1 + 1] = "01"; // Not referenced and Valid
[PTBR_Process1 + 2] = -1; // Invalid Page Number for Logical Page 1
[PTBR_Process1 + 3] = "00"; // Not referenced and Not Valid
[PTBR_Process1 + 4] = -1; // Invalid Page Number for Logical Page 2
[PTBR_Process1 + 5] = "00"; // Not referenced and Not Valid
[PTBR_Process1 + 6] = 30; // Physical Page Number for Logical Page 3
[PTBR_Process1 + 7] = "01"; // Not referenced and Valid

[READY_LIST + 33] = 1; // STATE is READY

[READY_LIST + 37] = PTBR_Process1; // PTBR
[READY_LIST + 38] = 4; // PTLR

[READY_LIST + 34] = 3 * 512; // Sets the entry for BP in the PCB
[READY_LIST + 35] = 3 * 512; // Sets the entry for SP in the PCB 

[READY_LIST + 36] = 0; // Sets the entry for IP to logical address 0 in the PCB
[READY_LIST + 32+31]=0;



counter =15;
while(counter!=31) do
	[READY_LIST + 32 + counter] = -1;
	counter=counter + 1;
endwhile;




ireturn;
