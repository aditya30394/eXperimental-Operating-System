alias physicalSP S0;
alias sysCallNo S1;
alias counter S2;
alias currentPID S3;
alias currentPCB S4;
alias indexSwop S5;
alias newPCB S6;
alias i S7;
alias newphysicalSP S8;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

sysCallNo = [physicalSP - 1];


if(sysCallNo==10) then
counter = 0;

while(counter<32 && [READY_LIST + (32*counter) + 1]!=1)do
	counter = counter +1;
endwhile;

if(counter==32)then
	halt;
endif;

currentPID = (PTBR-1024)/8;
currentPCB = READY_LIST + (32*currentPID);

counter = 0;
while(counter<8)do
	if([currentPCB + 15 + (2* counter) + 0]==-1)then
		[currentPCB + 15 + (2* counter) + 1] = -1;
		counter = counter + 1;
	else
		indexSwop = [currentPCB + (15 + 2* counter)+0];
		[FILE_TABLE + (2 * indexSwop)+1] = [FILE_TABLE + (2 * indexSwop)+1] - 1;
		
		if([FILE_TABLE + (2 * indexSwop)+1]==0)then
			[FILE_TABLE + (2 * indexSwop)+0] = -1;
		endif;
		[currentPCB + (15 + 2* counter)+0] = -1;
		[currentPCB + (15 + 2* counter)+1] = -1;
				
		counter = counter + 1;
	endif;				
endwhile;

[currentPCB + 1] =0; //state = terminated

counter = 0;
while(counter<4)do
	if([PTBR + (2*counter)+1]=="01" || [PTBR + (2*counter)+1]=="11")then
		[MEM_LIST + [PTBR + (2*counter)+0]]=0;
		[PTBR + (2*counter)+0] = -1;
		[PTBR + (2*counter)+1] = "00";
		counter = counter + 1;
	else	
		[PTBR + (2*counter)+0] = -1;
		[PTBR + (2*counter)+1] = "00";
		counter = counter + 1;
	endif;
endwhile;

i=0;
counter=currentPCB+32;
while(i<=32) do
	if([counter+1]==1) then
		newPCB=counter;
		break;
	endif;
	if(counter==READY_LIST+32*31) then
		counter=READY_LIST;
	else
		counter=counter+32;
	endif;
	i=i+1;	
endwhile;
		
BP=[newPCB+2];
SP=[newPCB+3];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];
PTBR=[newPCB+5];
PTLR=[newPCB+6];

SP = SP + 1;

newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack 
[ newPCB + 1 ] = 2; // Set STATE to READY
ireturn;


endif;
