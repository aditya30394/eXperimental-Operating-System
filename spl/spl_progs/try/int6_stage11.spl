alias physicalSP S0;
alias sysCallNo S1;
alias filename S2;
alias counter S3;
alias fatct S4;
alias counterBasic S5;
alias basicBlock S6;
alias i S7;
alias validPage S8;
alias dataCounter S9;
alias freeMem S10;
alias currentPID S11;
alias currentPCB S12;
alias indexSwop S13;
alias diff S14;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

sysCallNo = [physicalSP - 1];

filename = [physicalSP-3];//argument is fetched in register
currentPID = (PTBR - 1024) / 8;
currentPCB = READY_LIST + (32 * currentPID);


if(sysCallNo==9) then

	fatct = 0;
	while(fatct!=64)do
		if([FAT + (8*fatct)]==filename)then
			break;
		else
			fatct = fatct + 1;
		endif;
	endwhile;
	if(fatct==64)then
		[physicalSP-2]=-1;
		ireturn;
	endif;		
	basicBlock = [FAT+(8*fatct)+2];	
	load(1,basicBlock);
	i = 0;
	dataCounter = 0;

	while(i<256)do
		if([512+i]!=-1 && [512+i]!="")then
			dataCounter = dataCounter + 1;
		endif;		
		i=i+1;
	endwhile;
	if(dataCounter>3)then
		[physicalSP-2]=-1;
		ireturn;
	endif;		
validPage=0;
counter = 0;
while(counter<3)do
	if([PTBR + (2*counter)+1]==01||[PTBR + (2*counter)+1]==11)then
		validPage=validPage+1;
	endif;
	counter=counter+1;
endwhile;

if(validPage>dataCounter)then
	counter = 2;
	while(counter>=0)do
		if([PTBR + (2*counter) + 0]!=-1)then
			[MEM_LIST + [PTBR + (2*counter) + 0]]=0;
			validPage=validPage-1;
			
			[PTBR + (2*counter) + 0] = -1;
			[PTBR + (2*counter) + 1] = "00";
		endif;
		counter = counter -1;
		if(validPage==dataCounter)then
			break;
		endif;
	endwhile;
else
	if(validPage<dataCounter)then
		i = dataCounter - validPage;
		counter = 0;
		freeMem = 0;
		while(counter<64)do
			if([MEM_LIST + counter]==0)then
				freeMem = freeMem+1;
			endif;
			counter = counter + 1;
		endwhile;

	if(freeMem<i)then
		[physicalSP-2]=-1;
		ireturn;
	endif;		
	i = dataCounter - validPage;
	while(i>0)do
		counter = 0;
		while(counter<3)do
			if([PTBR + (2*counter) + 0]==-1)then
				freeMem = 0;
				while(freeMem<64)do
					if([MEM_LIST + freeMem]==0)then
						[PTBR + (2*counter) + 0] = freeMem;
						[PTBR + (2*counter) + 1] = "01";
						[MEM_LIST + freeMem] = 1;
						i=i-1;
						break;
					endif;
					freeMem = freeMem+1;
				endwhile;
				break;
			endif;
			counter=counter+1;
		endwhile;
 			
	endwhile;
	endif;
endif;	

load(1,basicBlock);
counter =0;
while(counter<3)do
	if([PTBR + (2*counter)+0]!=-1)then
		i = 0;
		while(i<256)do
			if([512+i]!=-1)then
				load([PTBR + (2*counter)+0],[512+i]);
				[512+i]=-1;
				break;
			endif;
			i=i+1;
		endwhile;
	endif;
	counter=counter+1;
endwhile;



counter = 0;
while(counter<8)do
	if([currentPCB + 15 + (2* counter) + 0]==-1)then
		[currentPCB + 15 + (2* counter) + 1] = -1;
		counter = counter + 1;
	else
		indexSwop = [currentPCB + (15 + 2* counter)+0];
		[FILE_TABLE + (2 * indexSwop)+1] = [FILE_TABLE + (2 * indexSwop)+1] - 1;
		
		if([FILE_TABLE + (2 * indexSwop)+1]==0)then
			[FILE_TABLE + (2 * indexSwop)+0] = -1;
		endif;
		[currentPCB + (15 + 2* counter)+0] = -1;
		[currentPCB + (15 + 2* counter)+1] = -1;
				
		counter = counter + 1;
	endif;				
endwhile;

SP = 3 * 512;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[physicalSP]=0;
ireturn;
endif;


if(sysCallNo==11) then
	[physicalSP-2]=currentPID;
	ireturn;
endif;

if(sysCallNo==12) then
  	[physicalSP-2]=[currentPCB+31];
	ireturn;
	
endif;






